[{"path":"https://asanaei.github.io/FocusGroup/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 FocusGroup authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"focusgroup-package-blueprint","dir":"Articles","previous_headings":"","what":"FocusGroup Package Blueprint","title":"FocusGroup Architecture","text":"Version: 0.2.1 Author: Ali Sanaei blueprint explains architecture, logical flow, data model, API surface FocusGroup R package. designed comprehensive, single reference maintainers contributors.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"FocusGroup Architecture","text":"FocusGroup simulates analyzes focus group discussions using LLM-backed agents. core built around R6 classes: FGAgent: individual participant/moderator persona, communication style, per-agent LLM config. FocusGroup: orchestrates session across phases, manages conversation history, performs summaries analyses, renders visualizations. ConversationFlow: abstract turn-taking mechanism concrete implementations: RoundRobinFlow, ProbabilisticFlow, DesireBasedFlow. High-level wrappers (run_focus_group, fg_quick) assemble agents, build script, run simulation, return structured outputs. Analysis helpers (analyze_focus_group, fg_analyze_quick) compute statistics, topics, TF-IDF, readability, LLM-assisted themes. LLM integration provided via LLMR package. Prompts modular customizable via get_default_prompt_templates(). Utilities handle placeholder substitution, prompt history formatting, token estimation, score parsing.","code":""},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"components-and-responsibilities","dir":"Articles","previous_headings":"Architecture","what":"Components and Responsibilities","title":"FocusGroup Architecture","text":"Encapsulates persona, style, demographics, survey responses, LLMR::llm_config. Generates utterances prompt templates. Computes “desire talk” scores DesireBasedFlow. Tracks per-agent token usage utterance history. Holds topic, purpose, named list agents, moderator_id, turn_taking_flow, prompt templates, question script (phase guide). Runs simulation controlled loop, including moderator turns, participant-response rounds, interim summarization, final summary. Logs messages rich metadata conversation_log. Provides analysis methods plotting utilities. Defines interface: select_next_speaker(focus_group) update_state_post_selection(...). RoundRobinFlow: cycles non-moderator participants. ProbabilisticFlow: weighted random selection recovery dynamics. DesireBasedFlow: queries LLM(s) score participant’s desire speak selects highest threshold, fallbacks. get_default_prompt_templates(): returns named prompt templates moderator phases, participant utterances, helper analyses. Placeholder utilities (replace_placeholders, replace_placeholders_known) populate dynamic context. History utilities (format_conversation_history, make_prompt_history) generate concise context windows, optionally including interim summary. Token/score utilities (estimate_tokens, parse_score_0_10).","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"data-model","dir":"Articles","previous_headings":"Architecture","what":"Data Model","title":"FocusGroup Architecture","text":"Agents: Named list FGAgent (keys agent IDs). One agent moderator (moderator_id). turn: integer speaker_id: character (agent ID “System”) is_moderator: logical text: character timestamp: POSIXct phase: character (e.g., opening, engagement_question, exploration_question, closing, setup, final_summary) response_id, finish_reason: character (LLMR) sent_tokens, rec_tokens, total_tokens: integers duration_s: numeric provider, model: character Question Script: list phase steps, list(phase = <name>, text = <optional question>). Prompt Templates: named list strings keyed prompt role/phase (see API reference).","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"simulation-flow","dir":"Articles","previous_headings":"Architecture","what":"Simulation Flow","title":"FocusGroup Architecture","text":"Create agents (participants + moderator) personas. Select conversation flow (turn-taking strategy). Prepare question script across phases (use defaults). Prepare prompts (defaults merged user overrides). Log roster System message provide context agents. Determine current phase question text (applicable). Moderator speaks using phase-specific prompt, placeholders populated topic, purpose, recent history, participation stats, current question. moderator utterance generated moderator agent via FGAgent$generate_utterance logged. phase expects participant responses (e.g., icebreaker/engagement/exploration/generic), use turn_taking_flow$select_next_speaker(self) choose participants. 3 participants may respond sequence returning control moderator, unless flow selects moderator (participant round ends). utterance, update per-group token totals metadata. Context Management: recent token usage message count passes thresholds, create interim summary (FocusGroup$summarize level 3) store current_conversation_summary subsequent prompts use windowed history plus summary. phase closing, end simulation, generate final (level 1) summary, log System message. conversation_log canonical transcript source. Wrappers optionally return data frame transcript, summary text, basic stats, .","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"turn-taking-strategies","dir":"Articles","previous_headings":"Architecture","what":"Turn-Taking Strategies","title":"FocusGroup Architecture","text":"Maintains simple index participant_ids returns next participant. Maintains propensities base_propensities agents. speaker selected, speaker’s propensity resets toward 0 (participants) halves (moderator), others recover toward base configured rate. Selection draws proportionally current propensities, simple guardrails immediate self-succession participant. Computes per-participant desire scores (0–10) via LLM prompts tailored persona, current question, last speaker, recent history. May use LLMR::call_llm_broadcast parallelize. Enforces minimum score threshold; none, relaxes threshold picks maximum keep discussion moving.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"prompt-system","dir":"Articles","previous_headings":"Architecture","what":"Prompt System","title":"FocusGroup Architecture","text":"Moderator prompts provided phases: opening, icebreaker_question, engagement_question, exploration_question, probing_focused, summarizing, transition, manage_participation, ending_question, closing, plus generic fallback. Participant prompts include utterance generation desire--talk scoring. Helper prompts include question suggestion, persona generation, thematic analysis. Placeholders support topic, purpose, persona, conversation history, current question, participation stats (dominant/quiet speakers), . Unknown placeholders preserved replace_placeholders_known avoid accidental removal tokens used downstream steps.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"llm-integration-and-cost-controls","dir":"Articles","previous_headings":"Architecture","what":"LLM Integration and Cost Controls","title":"FocusGroup Architecture","text":"FGAgent dedicated LLMR::llm_config (provider, model, temperature, max_tokens). Group-level admin tasks (summaries, thematic analysis) use FocusGroup$llm_config_admin. Token accounting: per-agent tokens recorded FGAgent; group totals tracked FocusGroup. Context control: history windows reduced summarized thresholds crossed. Defaults constrain max tokens moderator/participant/desire queries. Choosing RoundRobin flow cheaper DesireBased flow.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"reproducibility-and-options","dir":"Articles","previous_headings":"Architecture","what":"Reproducibility and Options","title":"FocusGroup Architecture","text":"run_focus_group fg_quick accept seed; create_agents_from_survey utilities read getOption(\"focusgroup.seed\") set (via .onLoad).","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"api-reference","dir":"Articles","previous_headings":"","what":"API Reference","title":"FocusGroup Architecture","text":"section lists classes functions, inputs/outputs, behavior. “Exported” denotes public API (present NAMESPACE). Internals stable package use may change frequently.","code":""},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"fgagent","dir":"Articles","previous_headings":"API Reference > R6 Classes (Exported)","what":"FGAgent","title":"FocusGroup Architecture","text":"Fields: id, persona_description, communication_style_instruction, model_config, role, demographics (list), survey_responses (list), is_moderator, history (list), tokens_sent_agent, tokens_received_agent. agent_details: list optional demographics, survey_responses, direct_persona_description, communication_style. Validates constructs persona style (moderator sensible defaults). Calls LLM, cleans self-referential openings, retries incomplete, updates tokens history. get_need_to_talk(topic, conversation_history_string, desire_prompt_template, max_tokens_desire = 20, current_moderator_question = “N/”, last_speaker_id = “N/”, last_utterance_text = “N/”) -> numeric score 0–10 Private helper: construct_persona_elements(details, is_moderator_flag) -> list(description, style_instruction)","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"focusgroup","dir":"Articles","previous_headings":"API Reference > R6 Classes (Exported)","what":"FocusGroup","title":"FocusGroup Architecture","text":"Fields: topic, purpose, agents (named list FGAgent), moderator_id, conversation_log (list), turn_taking_flow, prompt_templates (list), question_script (list), current_phase_index, current_question_text, current_conversation_summary, llm_config_admin, max_tokens_utterance, max_tokens_moderator, max_tokens_desire, total_tokens_sent, total_tokens_received. Merges defaults overrides, builds minimal script provided, sets admin LLM config token caps. Executes full loop, manages interim summaries final summary. Executes one moderator step plus small participant response round (3) phase expects responses. Levels: 1 (prose overview), 2 (detailed bullets), 3 (short bullets). analyze(turns = NULL, speaker_ids = NULL) -> list(speaker_stats tibble, full_transcript character) analyze_topics(num_topics = 5, min_doc_length = 20, top_n_terms = 10, turns = NULL, speaker_ids = NULL, …) -> list NULL analyze_tfidf(top_n_terms = 10, turns = NULL, speaker_ids = NULL, …) -> tibble(speaker_id, term, tf_idf) analyze_readability(measures = “Flesch”, turns = NULL, speaker_ids = NULL) -> tibble(measures…, speaker_id) analyze_themes(llm_config = NULL, turns = NULL, speaker_ids = NULL) -> character (themes summary; raw response attribute) analyze_statistics(turns = NULL, speaker_ids = NULL) -> list(word_count_anova, phase_participation tibble, turns_words_correlation test) analyze_participation_balance(turns = NULL, speaker_ids = NULL) -> list(participation_stats tibble, balance_metrics list) analyze_response_patterns(turns = NULL, speaker_ids = NULL) -> list(response_metrics tibble, interaction_metrics tibble) analyze_question_patterns(turns = NULL, speaker_ids = NULL) -> list(question_patterns tibble, question_distribution tibble) analyze_key_phrases(min_freq = 2, turns = NULL, speaker_ids = NULL) -> list(bigrams df, trigrams df, totals) plot_participation_timeline() -> ggplot plot_word_count_distribution() -> ggplot plot_participation_by_agent() -> ggplot plot_turn_length_timeline() -> ggplot Private helpers: get_next_phase_or_question(), log_message(...), get_filtered_log(...), get_recent_transcript_for_summary(n).","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"conversationflow-base","dir":"Articles","previous_headings":"API Reference > R6 Classes (Exported)","what":"ConversationFlow (base)","title":"FocusGroup Architecture","text":"Fields: agents, agent_ids, participant_ids, moderator_id, last_speaker_id. initialize(agents, moderator_id) select_next_speaker(focus_group) -> FGAgent NULL (abstract) update_state_post_selection(speaker_id, focus_group)","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"roundrobinflow","dir":"Articles","previous_headings":"API Reference > R6 Classes (Exported)","what":"RoundRobinFlow","title":"FocusGroup Architecture","text":"initialize(agents, moderator_id) select_next_speaker(focus_group) -> FGAgent (participant)","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"probabilisticflow","dir":"Articles","previous_headings":"API Reference > R6 Classes (Exported)","what":"ProbabilisticFlow","title":"FocusGroup Architecture","text":"Fields: propensities, base_propensities, recovery_increment. initialize(agents, moderator_id, initial_propensities = NULL, recovery_increment = 0.1) select_next_speaker(focus_group) -> FGAgent update_state_post_selection(speaker_id, focus_group)","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"desirebasedflow","dir":"Articles","previous_headings":"API Reference > R6 Classes (Exported)","what":"DesireBasedFlow","title":"FocusGroup Architecture","text":"Fields: last_desire_scores (named numeric), min_desire_threshold. initialize(agents, moderator_id, min_desire_threshold = 3) select_next_speaker(focus_group) -> FGAgent (participant) get_last_desire_scores() -> named numeric","code":""},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"create_conversation_flowmode-agents-moderator_id-flow_params-list---conversationflow","dir":"Articles","previous_headings":"API Reference > Factories and Wrappers (Exported)","what":"create_conversation_flow(mode, agents, moderator_id, flow_params = list()) -> ConversationFlow","title":"FocusGroup Architecture","text":"mode: “round_robin” | “probabilistic” | “desire_based”. flow_params: initial_propensities, recovery_increment, min_desire_threshold applicable.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"run_focus_grouptopic-participants-6-turns_per_phase-copening-2-icebreaker-3-engagement-8-exploration-10-closing-2-demographics-null-survey_responses-null-conversation_flow-desire_based-llm_config-null-seed-null-verbose-true---list","dir":"Articles","previous_headings":"API Reference > Factories and Wrappers (Exported)","what":"run_focus_group(topic, participants = 6, turns_per_phase = c(Opening = 2, Icebreaker = 3, Engagement = 8, Exploration = 10, Closing = 2), demographics = NULL, survey_responses = NULL, conversation_flow = “desire_based”, llm_config = NULL, seed = NULL, verbose = TRUE) -> list","title":"FocusGroup Architecture","text":"focus_group: FocusGroup object conversation: data.frame transcript extracted conversation_log summary: character (overall summary) basic_stats: FocusGroup$analyze() participants: list id, moderator flag, persona, input data","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"fg_quicktopic-participants-6-flow-cdesire_basedround_robinprobabilistic-model_config-null-seed-null-mode-cquickpro-verbose-true---list","dir":"Articles","previous_headings":"API Reference > Factories and Wrappers (Exported)","what":"fg_quick(topic, participants = 6, flow = c(“desire_based”,“round_robin”,“probabilistic”), model_config = NULL, seed = NULL, mode = c(“quick”,“pro”), verbose = TRUE) -> list","title":"FocusGroup Architecture","text":"Returns: transcript tibble, summary character, participants list, totals (tokens turns), config_meta, focus_group.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"fg_analyze_quickres---list","dir":"Articles","previous_headings":"API Reference > Factories and Wrappers (Exported)","what":"fg_analyze_quick(res) -> list","title":"FocusGroup Architecture","text":"Input: fg_quick() result FocusGroup object. Returns: basic_stats short_summary (summary level 3).","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"analyze_focus_groupfocus_group_result-num_topics-5-include_plots-true-sentiment_method-afinn---list","dir":"Articles","previous_headings":"API Reference > Factories and Wrappers (Exported)","what":"analyze_focus_group(focus_group_result, num_topics = 5, include_plots = TRUE, sentiment_method = “afinn”) -> list","title":"FocusGroup Architecture","text":"Input: FocusGroup object result run_focus_group(). Returns: list { basic_stats, topics, sentiment=NULL, tfidf, readability, themes, plots? }.","code":""},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"create_diverse_agentsn_participants-demographics-null-survey_responses-null-llm_config-null---list-of-fgagent","dir":"Articles","previous_headings":"API Reference > Agent Creation and Survey Integration","what":"create_diverse_agents(n_participants, demographics = NULL, survey_responses = NULL, llm_config = NULL) -> list of FGAgent","title":"FocusGroup Architecture","text":"Creates n_participants participants plus one moderator (MOD). demographics/survey_responses missing, uses generators . participant’s persona built via generate_persona().","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"create_agents_from_surveyn_participants-survey_path-demographic_vars-null-survey_vars-null-llm_config-null---list-of-fgagent","dir":"Articles","previous_headings":"API Reference > Agent Creation and Survey Integration","what":"create_agents_from_survey(n_participants, survey_path, demographic_vars = NULL, survey_vars = NULL, llm_config = NULL) -> list of FGAgent","title":"FocusGroup Architecture","text":"Loads haven-labeled survey files (.dta, .sav, .sas7bdat) converts value labels characters. Auto-detects common demographics survey variables (ANES 2024-specific mappings). Samples rows create agent inputs delegates create_diverse_agents().","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"generate_diverse_demographicsn---data-frame-internal","dir":"Articles","previous_headings":"API Reference > Agent Creation and Survey Integration","what":"generate_diverse_demographics(n) -> data.frame (internal)","title":"FocusGroup Architecture","text":"Columns: age, gender, education, income, location.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"generate_survey_responsesn---data-frame-internal","dir":"Articles","previous_headings":"API Reference > Agent Creation and Survey Integration","what":"generate_survey_responses(n) -> data.frame (internal)","title":"FocusGroup Architecture","text":"Example Likert-like variables: tech_usage_comfort, social_media_frequency, privacy_concern_level, environmental_concern.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"generate_personademographics-survey_responses-null---character-internal","dir":"Articles","previous_headings":"API Reference > Agent Creation and Survey Integration","what":"generate_persona(demographics, survey_responses = NULL) -> character (internal)","title":"FocusGroup Architecture","text":"Builds succinct persona paragraph demographics optional survey attributes; includes cautious handling values simple heuristics traits.","code":""},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"get_default_prompt_templates---named-list-exported","dir":"Articles","previous_headings":"API Reference > Prompts and Formatting","what":"get_default_prompt_templates() -> named list (exported)","title":"FocusGroup Architecture","text":"Participant: participant_utterance_subtle_persona, participant_desire_to_talk_nuanced. Moderator: moderator_opening, moderator_icebreaker_question, moderator_engagement_question, moderator_exploration_question, moderator_probing_focused, moderator_summarizing, moderator_transition, moderator_manage_participation, moderator_ending_question, moderator_closing, moderator_generic_utterance. Helpers: suggest_questions_prompt, generate_persona_prompt, thematic_analysis_prompt, sentiment_analysis_prompt.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"format_demographicsdemographics---character-exported","dir":"Articles","previous_headings":"API Reference > Prompts and Formatting","what":"format_demographics(demographics) -> character (exported)","title":"FocusGroup Architecture","text":"Filters empty values returns “key: value; key: value; …” informative fallback string.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"format_survey_responsessurvey_responses---character-exported","dir":"Articles","previous_headings":"API Reference > Prompts and Formatting","what":"format_survey_responses(survey_responses) -> character (exported)","title":"FocusGroup Architecture","text":"Produces readable multi-line block named list question-answer pairs.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"format_conversation_historyconversation_log-n_recent-7-include_summary-null---character-exported","dir":"Articles","previous_headings":"API Reference > Prompts and Formatting","what":"format_conversation_history(conversation_log, n_recent = 7, include_summary = NULL) -> character (exported)","title":"FocusGroup Architecture","text":"Formats recent turns (optionally prefixed summary) prompts.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"make_prompt_historylog-n_recent-5-include_summary-null---character-internal","dir":"Articles","previous_headings":"API Reference > Prompts and Formatting","what":"make_prompt_history(log, n_recent = 5, include_summary = NULL) -> character (internal)","title":"FocusGroup Architecture","text":"Thin wrapper format_conversation_history used throughout codebase.","code":""},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"replace_placeholderstemplate_string-values_list---character-exported","dir":"Articles","previous_headings":"API Reference > Placeholder Utilities","what":"replace_placeholders(template_string, values_list) -> character (exported)","title":"FocusGroup Architecture","text":"Replaces {{key}} placeholders found template given values; unknown placeholders removed.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"replace_placeholders_knowntemplate_string-values_list---character-internal","dir":"Articles","previous_headings":"API Reference > Placeholder Utilities","what":"replace_placeholders_known(template_string, values_list) -> character (internal)","title":"FocusGroup Architecture","text":"replaces placeholders present values_list, preserving {{...}} tokens later resolution.","code":""},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"estimate_tokenstext---integer","dir":"Articles","previous_headings":"API Reference > Token and Scoring Utilities (Internal)","what":"estimate_tokens(text) -> integer","title":"FocusGroup Architecture","text":"Rough token estimate: character length / 4.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"parse_score_0_10text---integer-in-010","dir":"Articles","previous_headings":"API Reference > Token and Scoring Utilities (Internal)","what":"parse_score_0_10(text) -> integer in [0,10]","title":"FocusGroup Architecture","text":"Extracts single integer desire score free text.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"visualization","dir":"Articles","previous_headings":"API Reference","what":"Visualization","title":"FocusGroup Architecture","text":"plotting methods live FocusGroup return ggplot objects: - plot_participation_timeline() - plot_word_count_distribution() - plot_participation_by_agent() - plot_turn_length_timeline()","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"conversation-log-schema-detailed","dir":"Articles","previous_headings":"API Reference","what":"Conversation Log Schema (Detailed)","title":"FocusGroup Architecture","text":"log entry created via private logger includes: turn: integer (auto-assigned sequentially; system messages may use current turn context) speaker_id: character (agent ID “System”) is_moderator: logical (inferred moderator ID provided) text: character (utterance system content) timestamp: POSIXct (time logging) phase: character (script phase special markers like setup, final_summary) response_id: character (LLMR response ID available) finish_reason: character (e.g., stop, length) sent_tokens, rec_tokens, total_tokens: integers (LLMR token accounting available) duration_s: numeric (provider-reported duration) provider, model: character","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"error-handling-and-edge-cases","dir":"Articles","previous_headings":"API Reference","what":"Error Handling and Edge Cases","title":"FocusGroup Architecture","text":"Strict input validation constructors wrappers (e.g., non-empty topic, presence moderator, correct flow types). Missing prompts fall back generic moderator template. Empty logs yield informative messages guarded behaviors analysis plotting. Topic modeling, TF-IDF, readability gracefully return NULL/empty tibbles warnings data insufficient.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"extensibility-guidelines","dir":"Articles","previous_headings":"API Reference","what":"Extensibility Guidelines","title":"FocusGroup Architecture","text":"Subclass ConversationFlow, implement select_next_speaker() (optionally) override update_state_post_selection(). Add case create_conversation_flow(). Retrieve defaults get_default_prompt_templates(), modify entries, pass FocusGroup$new(..., prompt_templates = ...). Add methods FocusGroup using private$get_filtered_log() reuse consistent filtering transcript assembly. Configure per-agent LLMR::llm_config accordingly. Group-level tasks use llm_config_admin set; else fall back moderator’s config.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"directory-structure","dir":"Articles","previous_headings":"API Reference","what":"Directory Structure","title":"FocusGroup Architecture","text":"R/FGAgent.R: agent class R/FocusGroup.R: group orchestration, analysis, plots R/ConversationFlow.R: base flow implementations; create_conversation_flow() R/convenience_wrappers.R: wrappers, analysis entry points, data generators, survey integration R/prompts.R: default prompt templates R/utils.R: formatting, placeholders, prompt history token utilities R/zzz.R: package docs .onLoad options","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"exported-symbols-public-api","dir":"Articles","previous_headings":"","what":"Exported Symbols (Public API)","title":"FocusGroup Architecture","text":"Classes: FGAgent, FocusGroup, ConversationFlow, RoundRobinFlow, ProbabilisticFlow, DesireBasedFlow Functions: run_focus_group, fg_quick, fg_analyze_quick, analyze_focus_group, create_diverse_agents, create_agents_from_survey, create_conversation_flow, get_default_prompt_templates, format_demographics, format_survey_responses, format_conversation_history, replace_placeholders Internals documented exported: generate_diverse_demographics, generate_survey_responses, generate_persona, estimate_tokens, parse_score_0_10, make_prompt_history, replace_placeholders_known.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"known-limitations-and-notes","dir":"Articles","previous_headings":"","what":"Known Limitations and Notes","title":"FocusGroup Architecture","text":"Desire-based flow can costlier (LLM calls) round-robin; choose based budget/needs. Summarization uses LLM contributes token usage; thresholds conservative defaults. Topic modeling requires sufficient term diversity; small short transcripts may yield meaningful results. Sentiment analysis helpers present prompts, sentiment computation currently part exported analysis pipeline.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"quick-usage-patterns","dir":"Articles","previous_headings":"","what":"Quick Usage Patterns","title":"FocusGroup Architecture","text":"fg_quick(topic = \"...\", participants = 4) res <- run_focus_group(topic = \"...\", participants = 6) analysis <- analyze_focus_group(res, num_topics = 5, include_plots = TRUE)","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/architecture.html","id":"change-impact-matrix-high-level","dir":"Articles","previous_headings":"","what":"Change Impact Matrix (High-Level)","title":"FocusGroup Architecture","text":"Prompt changes: affect agent outputs; structural changes. Flow changes: affect speaker selection; ensure selection invariants (participants vs. moderator) align phase logic. Analysis additions: safe; prefer using private$get_filtered_log() return tibbles/lists consistently. LLM config changes: affect cost/latency; ensure token caps respected. blueprint kept sync Roxygen documentation NAMESPACE. Update classes, flows, prompts, analysis capabilities change.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/focus-group-analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Focus Group Analysis","text":"FocusGroup package provides tools simulating analyzing focus group conversations. vignette demonstrates use package create, run, analyze focus group simulations. package uses FGAgents agents participate focus group study; agents can based various LLM models potentially different providers; see LLMR documentation providers built-support add new ones. One FGAgent always moderator.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/focus-group-analysis.html","id":"llmr-0-6-0-compatibility-notes","dir":"Articles","previous_headings":"Introduction","what":"LLMR 0.6.0 compatibility notes","title":"Focus Group Analysis","text":"Generative calls return llmr_response object. Use .character(resp) text, LLMR::tokens(resp) LLMR::finish_reason(resp) usage/metadata. legacy json = TRUE argument removed LLMR::call_llm() LLMR::call_llm_robust(). need set ; FocusGroup handles responses correctly without . Recommended: set provider API key environment variable (e.g., OPENAI_API_KEY). can omit api_key LLMR::llm_config(...) LLMR read automatically.","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/focus-group-analysis.html","id":"installation","dir":"Articles","previous_headings":"Introduction","what":"Installation","title":"Focus Group Analysis","text":"","code":"# Install from GitHub remotes::install_github(\"asanaei/FocusGroup\")"},{"path":"https://asanaei.github.io/FocusGroup/articles/focus-group-analysis.html","id":"running-a-simple-focus-group","dir":"Articles","previous_headings":"","what":"Running a Simple Focus Group","title":"Focus Group Analysis","text":"Let’s start running focus group 5 participants using high-level wrapper. Note need set OpenAI API key environment variable OPENAI_API_KEY:","code":"# Set your OpenAI API key (or set it in your environment) Sys.setenv(OPENAI_API_KEY = \"your-api-key-here\")  # Run a focus group with 5 participants result <- run_focus_group(   topic = \"Impact of Social Media on Mental Health\",   participants = 5 )  # View the focus group configuration print(result$focus_group)"},{"path":"https://asanaei.github.io/FocusGroup/articles/focus-group-analysis.html","id":"viewing-the-conversation","dir":"Articles","previous_headings":"","what":"Viewing the Conversation","title":"Focus Group Analysis","text":"","code":"# View the conversation head(result$conversation)"},{"path":"https://asanaei.github.io/FocusGroup/articles/focus-group-analysis.html","id":"analyzing-the-results","dir":"Articles","previous_headings":"","what":"Analyzing the Results","title":"Focus Group Analysis","text":"package provides several analysis functions help understand conversation:","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/focus-group-analysis.html","id":"basic-analysis","dir":"Articles","previous_headings":"Analyzing the Results","what":"Basic Analysis","title":"Focus Group Analysis","text":"","code":"# Get basic statistics stats <- analyze_focus_group(result) print(stats$summary)"},{"path":"https://asanaei.github.io/FocusGroup/articles/focus-group-analysis.html","id":"text-analysis","dir":"Articles","previous_headings":"Analyzing the Results","what":"Text Analysis","title":"Focus Group Analysis","text":"","code":"# Analyze text complexity complexity <- analyze_text_complexity(result) print(complexity$readability)  # Analyze response patterns patterns <- analyze_response_patterns(result) print(patterns$turn_patterns)"},{"path":"https://asanaei.github.io/FocusGroup/articles/focus-group-analysis.html","id":"question-analysis","dir":"Articles","previous_headings":"Analyzing the Results","what":"Question Analysis","title":"Focus Group Analysis","text":"","code":"# Analyze question patterns questions <- analyze_question_patterns(result) print(questions$question_patterns)"},{"path":"https://asanaei.github.io/FocusGroup/articles/focus-group-analysis.html","id":"visualization","dir":"Articles","previous_headings":"Analyzing the Results","what":"Visualization","title":"Focus Group Analysis","text":"package includes several plotting functions:","code":"# Create participation timeline participation_plot <- create_participation_timeline(result) print(participation_plot)  ## (Sentiment visualizations removed to simplify dependencies.)  # Create readability by phase readability_plot <- create_readability_by_phase(result) print(readability_plot)"},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/articles/focus-group-analysis.html","id":"custom-agent-profiles-and-manual-construction","dir":"Articles","previous_headings":"Advanced Usage","what":"Custom Agent Profiles and Manual Construction","title":"Focus Group Analysis","text":"can create custom agent profiles manually construct FocusGroup object:","code":"# Set your OpenAI API key (or set it in your environment) Sys.setenv(OPENAI_API_KEY = \"your-api-key-here\")  # Create diverse agents agents <- create_diverse_agents(   n_participants = 3,   demographics = list(     age = c(25, 35, 45),     gender = c(\"male\", \"female\", \"non-binary\"),     education = c(\"high school\", \"bachelor's\", \"master's\")   ) )  # Name the agents by their IDs agents_named <- setNames(agents, sapply(agents, function(a) a$id))  # Find moderator ID moderator_id <- agents_named[[1]]$id  # Create a conversation flow object flow_obj <- DesireBasedFlow$new(agents_named, moderator_id)  # Create the FocusGroup object fg <- FocusGroup$new(   topic = \"Impact of Social Media on Mental Health\",   purpose = \"To explore perspectives and experiences related to social media.\",   agents = agents_named,   moderator_id = moderator_id,   turn_taking_flow = flow_obj )"},{"path":"https://asanaei.github.io/FocusGroup/articles/focus-group-analysis.html","id":"custom-analysis","dir":"Articles","previous_headings":"Advanced Usage","what":"Custom Analysis","title":"Focus Group Analysis","text":"can perform custom analysis using conversation data:","code":"# Extract conversation data conv_data <- result$conversation  # Custom analysis example word_counts <- sapply(conv_data$message, function(x) length(strsplit(x, \"\\\\s+\")[[1]])) summary(word_counts)"},{"path":"https://asanaei.github.io/FocusGroup/articles/focus-group-analysis.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Focus Group Analysis","text":"Always start clear research question Use appropriate number participants (typically 5-8) Set realistic duration simulation Review adjust agent profiles based research needs Use multiple analysis methods get comprehensive understanding Remember set API key environment variable like OPENAI_API_KEY","code":""},{"path":"https://asanaei.github.io/FocusGroup/articles/focus-group-analysis.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Focus Group Analysis","text":"FocusGroup package provides powerful toolkit simulating analyzing focus group conversations. following vignette, able : Create configure focus groups Run simulations different parameters Analyze conversations using various methods Visualize results effectively Customize analysis specific needs information, please refer package documentation examples.","code":""},{"path":"https://asanaei.github.io/FocusGroup/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ali Sanaei. Maintainer.","code":""},{"path":"https://asanaei.github.io/FocusGroup/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sanaei (2025). FocusGroup: Focus Group Simulation Using LLM Agents. R package version 0.2.2, https://github.com/asanaei/FocusGroup.","code":"@Manual{,   title = {FocusGroup: Focus Group Simulation Using LLM Agents},   author = {Ali Sanaei},   year = {2025},   note = {R package version 0.2.2},   url = {https://github.com/asanaei/FocusGroup}, }"},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"FocusGroup","text":"FocusGroup package provides comprehensive R6-based framework simulating analyzing focus group discussions using Large Language Models (LLMs). enables researchers create virtual focus groups diverse AI agents, conduct structured discussions across multiple phases, perform sophisticated analysis resulting conversations. package designed flexibility mind, allowing users define agent personas, manage conversation flow, customize prompts LLM interactions.","code":""},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"FocusGroup","text":"Agent-Based Modeling: Create diverse AI participants moderators (FGAgent class) customizable personas derived demographics, survey responses, direct descriptions. agent can LLM configuration. RoundRobinFlow: Participants take turns fixed order. ProbabilisticFlow: Turn-taking based dynamically adjusting propensity scores. DesireBasedFlow: LLM-rated “desire talk” determines next speaker. Phase-Driven Simulations: FocusGroup class orchestrates discussions question_script defines phases (e.g., Opening, Icebreaker, Engagement, Exploration, Closing) moderator actions. Comprehensive Analysis: FocusGroup class includes methods basic conversation statistics, analyze_focus_group wrapper provides higher-level interface detailed analyses (topic modeling, sentiment, TF-IDF, readability, thematic analysis). Customizable Prompts: Default prompts provided (get_default_prompt_templates()), users can supply tailor agent behavior. LLM Integration: Leverages LLMR package robust interaction various LLM providers.","code":""},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"note","dir":"","previous_headings":"","what":"Note","title":"FocusGroup","text":"package experimental, rough edges. intention keep core two classes (FGAgent FocusGroup) unchanged, update methods functions interact .","code":""},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"FocusGroup","text":"","code":"# Install from GitHub (replace with your actual repository if different) # remotes::install_github(\"asanaei/FocusGroup\")  # Or, if you have a local tar.gz file: # install.packages(\"path/to/your/FocusGroupPackage_version.tar.gz\", repos = NULL, type = \"source\")"},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"FocusGroup","text":"Ensure following R packages installed: also need configure API keys chosen LLM provider (e.g., set OPENAI_API_KEY environment variable using OpenAI via LLMR).","code":"install.packages(c(\"R6\", \"LLMR\", \"dplyr\", \"tidyr\", \"ggplot2\",                     \"quanteda\", \"quanteda.textstats\", \"topicmodels\", \"tidytext\", \"stringr\"))"},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"id_1-simple-focus-group-simulation-using-run_focus_group","dir":"","previous_headings":"Quick Start","what":"1. Simple Focus Group Simulation using run_focus_group","title":"FocusGroup","text":"run_focus_group function high-level wrapper quickly set run simulation.","code":"library(FocusGroup) library(LLMR) # For llm_config  # Ensure OPENAI_API_KEY is set in your environment # Sys.setenv(OPENAI_API_KEY = \"your-openai-api-key\") if (Sys.getenv(\"OPENAI_API_KEY\") == \"\") {   stop(\"Please set your OPENAI_API_KEY environment variable.\") }  # Define LLM configuration for agents llm_config_agents <- LLMR::llm_config(   provider = \"openai\",   model = \"gpt-4o-mini\", # Or your preferred model   temperature = 0.7,   max_tokens = 200 )  # Run a basic focus group # `turns_per_phase` will generate a generic script structure. # The moderator prompts will adapt to the topic and phase. result <- run_focus_group(   topic = \"The impact of remote work on team collaboration\",   participants = 4,   turns_per_phase = c(Opening = 1, Icebreaker = 2, Engagement = 5, Exploration = 6, Closing = 1),   llm_config = llm_config_agents, # Used for all agents and admin tasks if not specified otherwise   seed = 123,   verbose = TRUE )  # Access the conversation log print(\"First 5 turns of the conversation:\") print(head(result$conversation, 5))  # View basic statistics print(\"Basic conversation statistics:\") print(result$basic_stats$speaker_stats)  # View summary print(\"Focus group summary:\") cat(result$summary)"},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"id_2-more-detailed-simulation-setup-using-r6-classes-directly","dir":"","previous_headings":"Quick Start","what":"2. More Detailed Simulation Setup (using R6 classes directly)","title":"FocusGroup","text":"control, can instantiate R6 classes directly.","code":"library(FocusGroup) library(LLMR)  # Sys.setenv(OPENAI_API_KEY = \"your-openai-api-key\") # Ensure API key is set  # a. Define LLM Configuration llm_conf <- LLMR::llm_config(   provider = \"openai\",   model = \"gpt-4o-mini\",   temperature = 0.7 )  # b. Create Agents (using create_diverse_agents or manually) # `create_diverse_agents` generates diverse demographics and basic personas. # It also creates a moderator. all_agents_list <- create_diverse_agents(   n_participants = 3,   llm_config = llm_conf ) # The list needs to be named by agent ID for FocusGroup class all_agents_named <- setNames(all_agents_list, sapply(all_agents_list, function(a) a$id)) moderator_id <- \"MOD\" # Default ID from create_diverse_agents  # c. Define a Custom Question Script custom_script <- list(   list(phase = \"opening\"),   list(phase = \"icebreaker_question\", text = \"What's one word that describes your ideal weekend?\"),   list(phase = \"engagement_question\", text = \"How do you typically spend your weekends?\"),   list(phase = \"exploration_question\", text = \"What makes a weekend truly relaxing or fulfilling for you?\"),   list(phase = \"closing\") )  # d. Choose a Conversation Flow # desire_flow <- DesireBasedFlow$new(agents = all_agents_named, moderator_id = moderator_id) round_robin_flow <- RoundRobinFlow$new(agents = all_agents_named, moderator_id = moderator_id)   # e. Create FocusGroup Object fg_manual <- FocusGroup$new(   topic = \"Weekend Preferences and Activities\",   purpose = \"To understand how people like to spend their weekends.\",   agents = all_agents_named,   moderator_id = moderator_id,   turn_taking_flow = round_robin_flow, # Using round robin for this example   question_script = custom_script,   llm_config_admin = llm_conf # For summaries etc. )  # f. Run Simulation fg_manual$run_simulation(verbose = TRUE)  # g. Analyze conversation_df_manual <- dplyr::bind_rows(lapply(fg_manual$conversation_log, as.data.frame)) print(\"Manually setup conversation (first 5 turns):\") print(head(conversation_df_manual, 5))  summary_manual <- fg_manual$summarize(summary_level = 1) cat(\"\\nSummary from manual setup:\\n\", summary_manual, \"\\n\")"},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"fgagent","dir":"","previous_headings":"Main Classes","what":"FGAgent","title":"FocusGroup","text":"Represents individual participant moderator. - Key Fields: id, persona_description, communication_style_instruction, model_config, is_moderator. - Key Methods: - initialize(id, agent_details, model_config, is_moderator): Creates agent. agent_details can include direct_persona_description, demographics, survey_responses, communication_style. - generate_utterance(...): Generates text based context prompts. - get_need_to_talk(...): (Used DesireBasedFlow) Queries LLM agent’s desire speak.","code":"# Example FGAgent creation participant_details <- list(   direct_persona_description = \"A 35-year-old software engineer who enjoys hiking and is concerned about data privacy.\",   communication_style = \"analytical and tends to ask clarifying questions\",   demographics = list(age = 35, occupation = \"Software Engineer\") ) # llm_conf defined earlier agent1 <- FGAgent$new(id = \"P1\", agent_details = participant_details, model_config = llm_conf)"},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"focusgroup","dir":"","previous_headings":"Main Classes","what":"FocusGroup","title":"FocusGroup","text":"Manages overall simulation, conversation flow, logging, analysis. - Key Fields: topic, purpose, agents (named list), moderator_id, conversation_log, turn_taking_flow, question_script, prompt_templates. - Key Methods: - initialize(...): Sets focus group. - run_simulation(num_turns, verbose): Executes simulation. - advance_turn(current_turn_number, verbose): Core logic single moderator-participant exchange. - summarize(summary_level, ...): Generates LLM-based summary conversation. - analyze(): Provides basic conversation statistics. - analyze_topics(), analyze_tfidf(), analyze_readability(), analyze_themes(): Various detailed analysis methods. - Plotting methods like plot_participation_timeline(), plot_word_count_distribution(), etc.","code":""},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"conversationflow-and-subclasses","dir":"","previous_headings":"Main Classes","what":"ConversationFlow (and subclasses)","title":"FocusGroup","text":"Defines next speaker chosen. - Base class: ConversationFlow - Implementations: - RoundRobinFlow: Cycles participants. - ProbabilisticFlow: Uses weighted probabilities based speaking history base propensities. - DesireBasedFlow: Uses LLM assess participant’s “desire talk”. - Created via create_conversation_flow(mode, agents, moderator_id, flow_params) direct instantiation.","code":""},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"advanced-usage-working-with-survey-data-eg-anes","dir":"","previous_headings":"","what":"Advanced Usage: Working with Survey Data (e.g., ANES)","title":"FocusGroup","text":"package designed allow agent personas informed survey data. create_diverse_agents function (extension, run_focus_group) can accept demographics survey_responses data frames. Key Idea: direct_persona_description provided agent_details, FGAgent$new (via create_diverse_agents internal generate_persona function) ideally able : 1. Use demographics data frame basic demographic facts. 2. Iterate columns survey_responses data frame given agent. 3. survey variable (column): * Retrieve question text (variable label Haven attributes, e.g., attr(column, \"label\")). * Retrieve textual representation coded answer (value label Haven attributes, e.g., using haven::as_factor() .character(), looking attr(column, \"labels\")). * Incorporate “Question: …, Answer: …” information persona_description passed LLM.","code":""},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"customizing-prompts","dir":"","previous_headings":"","what":"Customizing Prompts","title":"FocusGroup","text":"can tailor LLM’s behavior modifying default prompt templates.","code":"# Get the list of default prompts default_prompts <- get_default_prompt_templates()  # Modify a specific prompt, e.g., for the moderator's opening default_prompts$moderator_opening <- \"Hello everyone, and a very warm welcome! Today we're diving into {{topic}}. Our goal is {{focus_group_purpose}}. Let's make this a great discussion.\"  # When creating your FocusGroup object: # fg <- FocusGroup$new( #   ..., #   prompt_templates = default_prompts, #   ... # )"},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"analysis-capabilities","dir":"","previous_headings":"","what":"Analysis Capabilities","title":"FocusGroup","text":"FocusGroup class offers several built-analysis methods: - analyze(): Basic statistics (turn counts, word counts). - analyze_topics(num_topics = 5, ...): LDA topic modeling. - analyze_tfidf(top_n_terms = 10, ...): Term Frequency-Inverse Document Frequency. - analyze_readability(measures = \"Flesch\", ...): Readability scores. - analyze_themes(...): LLM-assisted thematic analysis. - analyze_participation_balance(...), analyze_response_patterns(...), analyze_question_patterns(...), analyze_key_phrases(...): specialized text interaction analyses. analyze_focus_group() wrapper function provides convenient way run several analyses .","code":""},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"visualizations","dir":"","previous_headings":"","what":"Visualizations","title":"FocusGroup","text":"FocusGroup class also includes plotting methods: - plot_participation_timeline() - plot_word_count_distribution() - plot_participation_by_agent() - plot_turn_length_timeline() also accessible via plots element output analyze_focus_group().","code":""},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"FocusGroup","text":"Contributions, bug reports, feature requests welcome! Please open issue submit pull request GitHub repository.","code":""},{"path":"https://asanaei.github.io/FocusGroup/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"FocusGroup","text":"project licensed MIT License - see LICENSE file details.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"ConversationFlow Base Class — ConversationFlow","title":"ConversationFlow Base Class — ConversationFlow","text":"`ConversationFlow` R6 base class defining interface turn-taking mechanisms focus group simulation. Subclasses implement specific strategies selecting next speaker.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"methods-for-subclassing","dir":"Reference","previous_headings":"","what":"Methods for Subclassing","title":"ConversationFlow Base Class — ConversationFlow","text":"`initialize(agents, moderator_id)` Sets flow. Call `super$initialize(agents, moderator_id)`. `select_next_speaker(focus_group)` *Required*. Logic choose next `FGAgent` speak.     return agent object `NULL`. `update_state_post_selection(speaker_id, focus_group)` Optional. Updates internal state     speaker spoken. Base implementation updates `self$last_speaker_id`.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"ConversationFlow Base Class — ConversationFlow","text":"agents named list `FGAgent` objects participating conversation. agent_ids character vector agent identifiers (names `agents` list). participant_ids character vector agent identifiers, excluding moderator. moderator_id Character. ID moderator agent. last_speaker_id ID agent last spoke. Can `NULL`.","code":""},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ConversationFlow Base Class — ConversationFlow","text":"ConversationFlow$new() ConversationFlow$select_next_speaker() ConversationFlow$update_state_post_selection() ConversationFlow$clone()","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ConversationFlow Base Class — ConversationFlow","text":"Initializes ConversationFlow object.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ConversationFlow Base Class — ConversationFlow","text":"","code":"ConversationFlow$new(agents, moderator_id)"},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ConversationFlow Base Class — ConversationFlow","text":"agents named list `FGAgent` objects. moderator_id Character. ID moderator agent.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"method-select-next-speaker-","dir":"Reference","previous_headings":"","what":"Method select_next_speaker()","title":"ConversationFlow Base Class — ConversationFlow","text":"Selects next speaker. Must implemented subclasses.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ConversationFlow Base Class — ConversationFlow","text":"","code":"ConversationFlow$select_next_speaker(focus_group)"},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ConversationFlow Base Class — ConversationFlow","text":"focus_group `FocusGroup` object managing simulation, providing context.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"ConversationFlow Base Class — ConversationFlow","text":"`FGAgent` object selected speaker, `NULL`.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"method-update-state-post-selection-","dir":"Reference","previous_headings":"","what":"Method update_state_post_selection()","title":"ConversationFlow Base Class — ConversationFlow","text":"Updates internal state speaker selected.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"ConversationFlow Base Class — ConversationFlow","text":"","code":"ConversationFlow$update_state_post_selection(speaker_id, focus_group)"},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"ConversationFlow Base Class — ConversationFlow","text":"speaker_id ID agent selected just spoke. focus_group `FocusGroup` object.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ConversationFlow Base Class — ConversationFlow","text":"objects class cloneable method.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"ConversationFlow Base Class — ConversationFlow","text":"","code":"ConversationFlow$clone(deep = FALSE)"},{"path":"https://asanaei.github.io/FocusGroup/reference/ConversationFlow.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"ConversationFlow Base Class — ConversationFlow","text":"deep Whether make deep clone.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"DesireBasedFlow Class — DesireBasedFlow","title":"DesireBasedFlow Class — DesireBasedFlow","text":"Selects next participant speaker based LLM-rated \"desire talk\". moderator's turns primarily handled `FocusGroup`'s phase/script logic. flow mainly choosing participant responds moderator.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"DesireBasedFlow Class — DesireBasedFlow","text":"FocusGroup::ConversationFlow -> DesireBasedFlow","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"DesireBasedFlow Class — DesireBasedFlow","text":"last_desire_scores Named numeric vector. Stores recent desire scores. min_desire_threshold Numeric. Minimum desire score participant considered.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"DesireBasedFlow Class — DesireBasedFlow","text":"FocusGroup::ConversationFlow$update_state_post_selection()","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"DesireBasedFlow Class — DesireBasedFlow","text":"DesireBasedFlow$new() DesireBasedFlow$select_next_speaker() DesireBasedFlow$get_last_desire_scores() DesireBasedFlow$clone()","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"DesireBasedFlow Class — DesireBasedFlow","text":"Initialize DesireBasedFlow.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DesireBasedFlow Class — DesireBasedFlow","text":"","code":"DesireBasedFlow$new(agents, moderator_id, min_desire_threshold = 3)"},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DesireBasedFlow Class — DesireBasedFlow","text":"agents named list `FGAgent` objects. moderator_id Character. ID moderator agent. min_desire_threshold Numeric. Minimum desire score eligible.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"method-select-next-speaker-","dir":"Reference","previous_headings":"","what":"Method select_next_speaker()","title":"DesireBasedFlow Class — DesireBasedFlow","text":"Selects next participant based desire talk.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"DesireBasedFlow Class — DesireBasedFlow","text":"","code":"DesireBasedFlow$select_next_speaker(focus_group)"},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"DesireBasedFlow Class — DesireBasedFlow","text":"focus_group `FocusGroup` object, providing context like current question, history.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"DesireBasedFlow Class — DesireBasedFlow","text":"selected `FGAgent` (participant), `NULL` participant meets threshold.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"method-get-last-desire-scores-","dir":"Reference","previous_headings":"","what":"Method get_last_desire_scores()","title":"DesireBasedFlow Class — DesireBasedFlow","text":"Get last calculated desire scores participants.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"DesireBasedFlow Class — DesireBasedFlow","text":"","code":"DesireBasedFlow$get_last_desire_scores()"},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"DesireBasedFlow Class — DesireBasedFlow","text":"named numeric vector desire scores.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"DesireBasedFlow Class — DesireBasedFlow","text":"objects class cloneable method.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"DesireBasedFlow Class — DesireBasedFlow","text":"","code":"DesireBasedFlow$clone(deep = FALSE)"},{"path":"https://asanaei.github.io/FocusGroup/reference/DesireBasedFlow.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"DesireBasedFlow Class — DesireBasedFlow","text":"deep Whether make deep clone.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":null,"dir":"Reference","previous_headings":"","what":"FGAgent Class — FGAgent","title":"FGAgent Class — FGAgent","text":"FGAgent Class FGAgent Class","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FGAgent Class — FGAgent","text":"Represents agent (participant moderator) focus group simulation. agent unique ID, persona, LLM configuration, methods generate utterances express desire speak.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"customizing-agents","dir":"Reference","previous_headings":"","what":"Customizing Agents","title":"FGAgent Class — FGAgent","text":"`FGAgent` designed flexible: **Per-Agent LLM Configuration**: agent initialized `model_config`.     allows different agents use different LLMs, temperatures, even providers. **Persona Definition**: `agent_details` (containing `demographics`,     `survey_responses`, `direct_persona_description`, /`communication_style`)     used construct `persona_description` `communication_style_instruction`. **Subclassing**: advanced customization, inherit `FGAgent` override     methods add new fields.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"FGAgent Class — FGAgent","text":"id Character. Unique identifier agent. persona_description Character. Textual description agent's persona, derived demographics, survey responses, direct input. communication_style_instruction Character. specific instruction agent's communication style, included prompts. model_config `llm_config` object (`LLMR` package) specifying LLM provider, model, API key, parameters agent. is_moderator Logical. `TRUE` agent moderator, `FALSE` otherwise. history List. log utterances made agent simulation. tokens_sent_agent Numeric. Total tokens sent agent. tokens_received_agent Numeric. Total tokens received agent. role Character. \"moderator\" \"participant\" convenience reports. demographics Named list. Raw demographics used build persona. survey_responses Named list. Raw survey responses used build persona.","code":""},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"FGAgent Class — FGAgent","text":"FGAgent$new() FGAgent$generate_utterance() FGAgent$get_need_to_talk() FGAgent$clone()","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"FGAgent Class — FGAgent","text":"Initialize new FGAgent.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FGAgent Class — FGAgent","text":"","code":"FGAgent$new(id, agent_details, model_config, is_moderator = FALSE)"},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FGAgent Class — FGAgent","text":"id Character. unique identifier agent. agent_details List. Contains information build agent's persona. Can include: `demographics`: named list demographic attributes (e.g., `list(age = 30, occupation = \"teacher\")`). `survey_responses`: named list survey questions answers. `direct_persona_description`: character string used directly persona. Overrides demographics/survey provided. `communication_style`: character string describing agent's communication style (e.g., \"analytical direct\", \"empathetic story-driven\"). `is_moderator` `TRUE` specific details provided, default moderator persona used. model_config `llm_config` object `LLMR::llm_config()`. is_moderator Logical. `TRUE` agent moderator, `FALSE` otherwise.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"method-generate-utterance-","dir":"Reference","previous_headings":"","what":"Method generate_utterance()","title":"FGAgent Class — FGAgent","text":"Generate utterance agent.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"FGAgent Class — FGAgent","text":"","code":"FGAgent$generate_utterance(   topic,   conversation_history_string,   utterance_prompt_template,   max_tokens_utterance = 150,   current_moderator_question = \"N/A\",   conversation_summary_so_far = \"N/A\",   current_phase = \"discussion\" )"},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"FGAgent Class — FGAgent","text":"topic Character. current discussion topic. conversation_history_string Character. Formatted string recent conversation history. utterance_prompt_template Character. prompt template use. max_tokens_utterance Integer. Maximum tokens generated utterance. current_moderator_question Character. current question posed moderator. conversation_summary_so_far Character. summary earlier parts conversation. current_phase Character. current phase focus group (e.g., \"icebreaker\", \"exploration\").","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"FGAgent Class — FGAgent","text":"Character string containing agent's generated utterance.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"method-get-need-to-talk-","dir":"Reference","previous_headings":"","what":"Method get_need_to_talk()","title":"FGAgent Class — FGAgent","text":"Get agent's \"desire talk\" score. method queries LLM rate strongly agent feels need contribute discussion current moment.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"FGAgent Class — FGAgent","text":"","code":"FGAgent$get_need_to_talk(   topic,   conversation_history_string,   desire_prompt_template,   max_tokens_desire = 20,   current_moderator_question = \"N/A\",   last_speaker_id = \"N/A\",   last_utterance_text = \"N/A\" )"},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"FGAgent Class — FGAgent","text":"topic Character. current discussion topic. conversation_history_string Character. Formatted string recent conversation history. desire_prompt_template Character. prompt template use query. max_tokens_desire Integer. Maximum tokens LLM's response desire query. current_moderator_question Character. current question posed moderator. last_speaker_id Character. ID agent spoke last. last_utterance_text Character. text last utterance.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"FGAgent Class — FGAgent","text":"Numeric. score 0 (desire) 10 (strong desire).","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"FGAgent Class — FGAgent","text":"objects class cloneable method.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"FGAgent Class — FGAgent","text":"","code":"FGAgent$clone(deep = FALSE)"},{"path":"https://asanaei.github.io/FocusGroup/reference/FGAgent.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"FGAgent Class — FGAgent","text":"deep Whether make deep clone.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"FocusGroup R6 Class — FocusGroup","title":"FocusGroup R6 Class — FocusGroup","text":"Main R6 class managing running focus group simulation. orchestrates simulation distinct phases (Opening, Icebreaker, Engagement, Exploration, Closing) guided question script, manages agent interactions via turn-taking flow, provides methods analysis visualization conversation. Provides utilities simulating analyzing focus group discussions using Large Language Models. Enables researchers create virtual focus groups diverse AI agents detailed personas, conduct structured discussions across multiple phases, perform analysis resulting conversations.","code":""},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"FocusGroup R6 Class — FocusGroup","text":"topic Character. main topic focus group discussion. purpose Character. primary purpose research objective conducting focus group. agents Named list. list `FGAgent` objects participating simulation, indexed IDs. moderator_id Character. ID agent designated moderator. conversation_log List. chronological log messages. message list: `turn`, `speaker_id`, `is_moderator`, `text`, `timestamp`, `phase`. turn_taking_flow `ConversationFlow` object dictating participant turn-taking. prompt_templates List. Holds prompt templates agent/moderator actions. question_script List. structured list defining phases specific questions/actions moderator. element list `phase` (e.g., \"opening\", \"icebreaker_question\") optionally `text` (specific questions). current_phase_index Integer. Tracks current position `question_script`. current_question_text Character. Text current question discussed. current_conversation_summary Character. LLM-generated summary earlier parts conversation, used managing context length prompts. llm_config_admin `llm_config` object group-level LLM tasks (summarization, analysis). max_tokens_utterance Integer. Default max tokens participant utterances. max_tokens_moderator Integer. Default max tokens moderator utterances. max_tokens_desire Integer. Default max tokens desire--talk queries. total_tokens_sent Numeric. Total tokens sent across LLM calls group. total_tokens_received Numeric. Total tokens received across LLM calls.","code":""},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"FocusGroup R6 Class — FocusGroup","text":"FocusGroup$new() FocusGroup$run_simulation() FocusGroup$advance_turn() FocusGroup$summarize() FocusGroup$analyze() FocusGroup$analyze_topics() FocusGroup$analyze_tfidf() FocusGroup$analyze_readability() FocusGroup$analyze_themes() FocusGroup$analyze_statistics() FocusGroup$analyze_participation_balance() FocusGroup$analyze_response_patterns() FocusGroup$analyze_question_patterns() FocusGroup$analyze_key_phrases() FocusGroup$plot_participation_timeline() FocusGroup$plot_word_count_distribution() FocusGroup$plot_participation_by_agent() FocusGroup$plot_turn_length_timeline() FocusGroup$clone()","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"FocusGroup R6 Class — FocusGroup","text":"Initialize new FocusGroup simulation.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$new(   topic,   purpose,   agents,   moderator_id,   turn_taking_flow,   question_script = list(),   prompt_templates = list(),   llm_config_admin = NULL,   max_tokens_config = list() )"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"topic Character. main discussion topic. purpose Character. primary purpose focus group. agents Named list initialized `FGAgent` objects. moderator_id Character. ID agent acting moderator. turn_taking_flow initialized `ConversationFlow` object. question_script List. Moderator's script defining phases questions. empty, minimal default script (opening, generic discussion, closing) used. prompt_templates List. Custom prompt templates. Defaults used provided. llm_config_admin `llm_config` object administrative LLM tasks (e.g., summarization, LLM-based analysis). NULL, moderator's `model_config` used tasks. max_tokens_config List. Optional. Named list `utterance`, `moderator`, `desire` override default max token limits LLM call types.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-run-simulation-","dir":"Reference","previous_headings":"","what":"Method run_simulation()","title":"FocusGroup R6 Class — FocusGroup","text":"Run full focus group simulation. Iterates `question_script` phases specified number turns.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$run_simulation(num_turns = NULL, verbose = FALSE)"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"num_turns Integer. Optional. Maximum number turns run. `NULL` (default), simulation runs `question_script` exhausted moderator decides end. `num_turns` `question_script` provided, simulation stops whichever condition met first. verbose Logical. `TRUE`, prints progress utterances console.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"Invisibly returns `conversation_log`.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-advance-turn-","dir":"Reference","previous_headings":"","what":"Method advance_turn()","title":"FocusGroup R6 Class — FocusGroup","text":"Advance simulation one logical step (moderator action + participant response applicable).","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$advance_turn(current_turn_number, verbose = FALSE)"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"current_turn_number Integer. current turn number logging. verbose Logical. `TRUE`, print progress.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"Logical. `TRUE` simulation continue, `FALSE` end.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-summarize-","dir":"Reference","previous_headings":"","what":"Method summarize()","title":"FocusGroup R6 Class — FocusGroup","text":"Generate summary conversation using LLM.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$summarize(   llm_config = NULL,   summary_level = 1,   max_tokens = NULL,   internal_call = FALSE,   transcript_override = NULL )"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"llm_config `llm_config` object summarization LLM. `NULL`, uses `self$llm_config_admin`. summary_level Integer (1-3). 1: Prose overview, 2: Detailed bulleted, 3: Short bulleted takeaways. max_tokens Integer. Optional. Max tokens summary. internal_call Logical. TRUE, internal call (e.g. context window management) token counts added agent \"owns\" llm_config_admin. transcript_override Character. Optional. provided, transcript summarized instead `self$conversation_log`.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"Character string containing generated summary.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-analyze-","dir":"Reference","previous_headings":"","what":"Method analyze()","title":"FocusGroup R6 Class — FocusGroup","text":"Basic analysis conversation log.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$analyze(turns = NULL, speaker_ids = NULL)"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"turns Integer vector. Optional. Specific turns analyze. `NULL`, analyzes turns. speaker_ids Character vector. Optional. Specific speakers analyze. `NULL`, analyzes speakers.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"list `speaker_stats` (tibble: speaker_id, utterance_count, total_words, avg_words_per_utterance)         `full_transcript` (character string).","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-analyze-topics-","dir":"Reference","previous_headings":"","what":"Method analyze_topics()","title":"FocusGroup R6 Class — FocusGroup","text":"Perform LDA topic modeling conversation.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$analyze_topics(   num_topics = 5,   min_doc_length = 20,   top_n_terms = 10,   turns = NULL,   speaker_ids = NULL,   ... )"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"num_topics Integer. Number topics identify. min_doc_length Integer. Min words speaker's aggregated text document. top_n_terms Integer. Number top terms per topic return. turns Integer vector. Optional. Specific turns analyze. speaker_ids Character vector. Optional. Specific speakers analyze. ... Additional arguments `topicmodels::LDA()`.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"list LDA model, topic terms, document-topic proportions. `NULL` failure.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-analyze-tfidf-","dir":"Reference","previous_headings":"","what":"Method analyze_tfidf()","title":"FocusGroup R6 Class — FocusGroup","text":"Calculate TF-IDF scores terms per participant.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$analyze_tfidf(   top_n_terms = 10,   turns = NULL,   speaker_ids = NULL,   ... )"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"top_n_terms Integer. Number top TF-IDF terms per participant. turns Integer vector. Optional. Specific turns analyze. speaker_ids Character vector. Optional. Specific speakers analyze. ... Additional arguments `tidytext::unnest_tokens`.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"tibble TF-IDF scores.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-analyze-readability-","dir":"Reference","previous_headings":"","what":"Method analyze_readability()","title":"FocusGroup R6 Class — FocusGroup","text":"Calculate readability scores participant's aggregated text.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$analyze_readability(   measures = \"Flesch\",   turns = NULL,   speaker_ids = NULL )"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"measures Character vector. Readability measure(s) `quanteda.textstats::textstat_readability`. turns Integer vector. Optional. Specific turns analyze. speaker_ids Character vector. Optional. Specific speakers analyze.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"tibble readability scores.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-analyze-themes-","dir":"Reference","previous_headings":"","what":"Method analyze_themes()","title":"FocusGroup R6 Class — FocusGroup","text":"Perform LLM-assisted thematic analysis transcript.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$analyze_themes(llm_config = NULL, turns = NULL, speaker_ids = NULL)"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"llm_config `llm_config` object analysis. `NULL`, uses `self$llm_config_admin`. turns Integer vector. Optional. Specific turns analyze. speaker_ids Character vector. Optional. Specific speakers analyze.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"list `themes_summary` (character string LLM) `raw_llm_response`.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-analyze-statistics-","dir":"Reference","previous_headings":"","what":"Method analyze_statistics()","title":"FocusGroup R6 Class — FocusGroup","text":"Perform statistical analysis conversation patterns.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$analyze_statistics(turns = NULL, speaker_ids = NULL)"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"turns Integer vector. Optional. Specific turns analyze. speaker_ids Character vector. Optional. Specific speakers analyze.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"list ANOVA results, phase participation stats, correlations.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-analyze-participation-balance-","dir":"Reference","previous_headings":"","what":"Method analyze_participation_balance()","title":"FocusGroup R6 Class — FocusGroup","text":"Analyze participation balance dominance patterns.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$analyze_participation_balance(turns = NULL, speaker_ids = NULL)"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"turns Integer vector. Optional. Specific turns analyze. speaker_ids Character vector. Optional. Specific speakers analyze.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"list participation statistics balance metrics.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-analyze-response-patterns-","dir":"Reference","previous_headings":"","what":"Method analyze_response_patterns()","title":"FocusGroup R6 Class — FocusGroup","text":"Analyze response patterns interaction behaviors.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$analyze_response_patterns(turns = NULL, speaker_ids = NULL)"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"turns Integer vector. Optional. Specific turns analyze. speaker_ids Character vector. Optional. Specific speakers analyze.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"list response interaction pattern metrics.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-analyze-question-patterns-","dir":"Reference","previous_headings":"","what":"Method analyze_question_patterns()","title":"FocusGroup R6 Class — FocusGroup","text":"Analyze question asking patterns conversation.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$analyze_question_patterns(turns = NULL, speaker_ids = NULL)"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"turns Integer vector. Optional. Specific turns analyze. speaker_ids Character vector. Optional. Specific speakers analyze.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"list question pattern analysis.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-analyze-key-phrases-","dir":"Reference","previous_headings":"","what":"Method analyze_key_phrases()","title":"FocusGroup R6 Class — FocusGroup","text":"Extract analyze key phrases using n-grams.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$analyze_key_phrases(min_freq = 2, turns = NULL, speaker_ids = NULL)"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"min_freq Integer. Minimum frequency phrases considered key. turns Integer vector. Optional. Specific turns analyze. speaker_ids Character vector. Optional. Specific speakers analyze.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"list bigram trigram analysis.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-plot-participation-timeline-","dir":"Reference","previous_headings":"","what":"Method plot_participation_timeline()","title":"FocusGroup R6 Class — FocusGroup","text":"Create participation timeline plot showing cumulative turns participant across phases.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$plot_participation_timeline()"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"ggplot object","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-plot-word-count-distribution-","dir":"Reference","previous_headings":"","what":"Method plot_word_count_distribution()","title":"FocusGroup R6 Class — FocusGroup","text":"Create word count distribution plot showing message length patterns.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$plot_word_count_distribution()"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"ggplot object","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-plot-participation-by-agent-","dir":"Reference","previous_headings":"","what":"Method plot_participation_by_agent()","title":"FocusGroup R6 Class — FocusGroup","text":"Create participation agent plot showing total turns per participant.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$plot_participation_by_agent()"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"ggplot object","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-plot-turn-length-timeline-","dir":"Reference","previous_headings":"","what":"Method plot_turn_length_timeline()","title":"FocusGroup R6 Class — FocusGroup","text":"Create turn length timeline plot showing message length evolution time.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$plot_turn_length_timeline()"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"FocusGroup R6 Class — FocusGroup","text":"ggplot object","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"FocusGroup R6 Class — FocusGroup","text":"objects class cloneable method.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusGroup R6 Class — FocusGroup","text":"","code":"FocusGroup$clone(deep = FALSE)"},{"path":"https://asanaei.github.io/FocusGroup/reference/FocusGroup.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusGroup R6 Class — FocusGroup","text":"deep Whether make deep clone.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"ProbabilisticFlow Class — ProbabilisticFlow","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"Selects next speaker probabilistically based propensities. Propensities decrease speaking recover time.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"FocusGroup::ConversationFlow -> ProbabilisticFlow","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"propensities Named numeric vector. Current speaking propensities agent. base_propensities Named numeric vector. Base propensities agent. recovery_increment Numeric. Factor propensities recover towards base.","code":""},{"path":[]},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"ProbabilisticFlow$new() ProbabilisticFlow$select_next_speaker() ProbabilisticFlow$update_state_post_selection() ProbabilisticFlow$clone()","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"Initialize ProbabilisticFlow.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"","code":"ProbabilisticFlow$new(   agents,   moderator_id,   initial_propensities = NULL,   recovery_increment = 0.1 )"},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"agents named list `FGAgent` objects. moderator_id Character. ID moderator agent. initial_propensities Named numeric vector. Optional. Base propensities agent. `NULL`, defaults 1.0 participants 1.5 moderator. Names must match agent IDs. recovery_increment Numeric. Rate propensity recovers (0 1).","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"method-select-next-speaker-","dir":"Reference","previous_headings":"","what":"Method select_next_speaker()","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"Selects next speaker based current propensities.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"","code":"ProbabilisticFlow$select_next_speaker(focus_group)"},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"focus_group `FocusGroup` object.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"selected `FGAgent`, `NULL` eligible speaker.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"method-update-state-post-selection-","dir":"Reference","previous_headings":"","what":"Method update_state_post_selection()","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"Updates propensities speaker selected.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"","code":"ProbabilisticFlow$update_state_post_selection(speaker_id, focus_group)"},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"speaker_id ID agent spoke. focus_group `FocusGroup` object.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"objects class cloneable method.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"","code":"ProbabilisticFlow$clone(deep = FALSE)"},{"path":"https://asanaei.github.io/FocusGroup/reference/ProbabilisticFlow.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"ProbabilisticFlow Class — ProbabilisticFlow","text":"deep Whether make deep clone.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":null,"dir":"Reference","previous_headings":"","what":"RoundRobinFlow Class — RoundRobinFlow","title":"RoundRobinFlow Class — RoundRobinFlow","text":"Implements round-robin turn-taking mechanism among participants. moderator typically handled `FocusGroup`'s phase logic, flow focuses cycling non-moderator agents.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"RoundRobinFlow Class — RoundRobinFlow","text":"FocusGroup::ConversationFlow -> RoundRobinFlow","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"RoundRobinFlow Class — RoundRobinFlow","text":"current_participant_index Integer. Current position rotation participants.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"RoundRobinFlow Class — RoundRobinFlow","text":"FocusGroup::ConversationFlow$update_state_post_selection()","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"RoundRobinFlow Class — RoundRobinFlow","text":"RoundRobinFlow$new() RoundRobinFlow$select_next_speaker() RoundRobinFlow$clone()","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"RoundRobinFlow Class — RoundRobinFlow","text":"Initialize RoundRobinFlow.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RoundRobinFlow Class — RoundRobinFlow","text":"","code":"RoundRobinFlow$new(agents, moderator_id)"},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RoundRobinFlow Class — RoundRobinFlow","text":"agents named list `FGAgent` objects. moderator_id Character. ID moderator agent.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":"method-select-next-speaker-","dir":"Reference","previous_headings":"","what":"Method select_next_speaker()","title":"RoundRobinFlow Class — RoundRobinFlow","text":"Selects next participant round-robin order.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"RoundRobinFlow Class — RoundRobinFlow","text":"","code":"RoundRobinFlow$select_next_speaker(focus_group)"},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"RoundRobinFlow Class — RoundRobinFlow","text":"focus_group `FocusGroup` object.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"RoundRobinFlow Class — RoundRobinFlow","text":"selected `FGAgent` (participant), `NULL` participants.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"RoundRobinFlow Class — RoundRobinFlow","text":"objects class cloneable method.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"RoundRobinFlow Class — RoundRobinFlow","text":"","code":"RoundRobinFlow$clone(deep = FALSE)"},{"path":"https://asanaei.github.io/FocusGroup/reference/RoundRobinFlow.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"RoundRobinFlow Class — RoundRobinFlow","text":"deep Whether make deep clone.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/analyze_focus_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze Focus Group Results — analyze_focus_group","title":"Analyze Focus Group Results — analyze_focus_group","text":"Performs comprehensive analysis focus group results, including topic modeling, sentiment analysis, basic statistics.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/analyze_focus_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze Focus Group Results — analyze_focus_group","text":"","code":"analyze_focus_group(   focus_group_result,   num_topics = 5,   include_plots = TRUE,   sentiment_method = \"afinn\" )"},{"path":"https://asanaei.github.io/FocusGroup/reference/analyze_focus_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze Focus Group Results — analyze_focus_group","text":"focus_group_result Either FocusGroup object result run_focus_group() num_topics Integer number topics topic modeling (default: 5) include_plots Logical, whether generate plots (default: TRUE) sentiment_method Character, sentiment analysis method (default: \"afinn\")","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/analyze_focus_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze Focus Group Results — analyze_focus_group","text":"List containing various analysis results including topics, sentiment,   readability, visualizations","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/analyze_focus_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze Focus Group Results — analyze_focus_group","text":"","code":"if (FALSE) { # \\dontrun{ # Run focus group and analyze result <- run_focus_group(\"Climate change perceptions\", participants = 8) analysis <- analyze_focus_group(result, num_topics = 4)  # View topic analysis analysis$topics  # View sentiment over time analysis$plots$sentiment_timeline } # }"},{"path":"https://asanaei.github.io/FocusGroup/reference/create_agents_from_survey.html","id":null,"dir":"Reference","previous_headings":"","what":"Create agents from haven-coded survey data — create_agents_from_survey","title":"Create agents from haven-coded survey data — create_agents_from_survey","text":"Builds set `FGAgent`s sampling rows haven-coded survey file turning labeled variables demographics/survey-responses driven personas. Works Stata (.dta), SPSS (.sav), SAS files variable labels.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/create_agents_from_survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create agents from haven-coded survey data — create_agents_from_survey","text":"","code":"create_agents_from_survey(   n_participants,   survey_path,   demographic_vars = NULL,   survey_vars = NULL,   llm_config = NULL )"},{"path":"https://asanaei.github.io/FocusGroup/reference/create_agents_from_survey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create agents from haven-coded survey data — create_agents_from_survey","text":"n_participants Integer number participants (excludes moderator). survey_path Character path survey file (e.g., .dta, .sav files) demographic_vars Character vector variable names use demographics. NULL, attempts auto-detect common demographic variables. survey_vars Character vector variable names use survey responses. NULL, uses remaining non-demographic variables. llm_config Optional `LLMR::llm_config` agents. `NULL`, small OpenAI config created.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/create_agents_from_survey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create agents from haven-coded survey data — create_agents_from_survey","text":"list `FGAgent` objects (participants + moderator).","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/create_agents_from_survey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create agents from haven-coded survey data — create_agents_from_survey","text":"","code":"if (FALSE) { # \\dontrun{ # Use ANES data anes_path <- \"path/to/anes_timeseries_2024_stata.dta\" agents <- create_agents_from_survey(6, anes_path)  # Specify particular variables agents <- create_agents_from_survey(   n_participants = 4,   survey_path = anes_path,   demographic_vars = c(\"age\", \"gender\", \"education\", \"race\"),   survey_vars = c(\"party_id\", \"ideology\", \"vote_intent\") ) } # }"},{"path":"https://asanaei.github.io/FocusGroup/reference/create_conversation_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Conversation Flow Object — create_conversation_flow","title":"Create a Conversation Flow Object — create_conversation_flow","text":"Factory function create instance `ConversationFlow` subclass.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/create_conversation_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Conversation Flow Object — create_conversation_flow","text":"","code":"create_conversation_flow(mode, agents, moderator_id, flow_params = list())"},{"path":"https://asanaei.github.io/FocusGroup/reference/create_conversation_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Conversation Flow Object — create_conversation_flow","text":"mode Character. type turn-taking flow create. Supported: \"round_robin\", \"probabilistic\", \"desire_based\". agents named list `FGAgent` objects. moderator_id Character. ID moderator agent. flow_params List. Additional parameters specific chosen flow type. \"probabilistic\": `initial_propensities` (named numeric vector), `recovery_increment` (numeric). \"desire_based\": `min_desire_threshold` (numeric).","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/create_conversation_flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Conversation Flow Object — create_conversation_flow","text":"initialized `ConversationFlow` object (e.g., `RoundRobinFlow`, `ProbabilisticFlow`, `DesireBasedFlow`).","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/create_conversation_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Conversation Flow Object — create_conversation_flow","text":"","code":"# Assuming FGAgent class and agents list (agent1, agent2, mod) are defined # mod_id <- \"Moderator\" # all_my_agents <- list(Agent1 = agent1, Agent2 = agent2, Moderator = mod) # flow <- create_conversation_flow(\"desire_based\", all_my_agents, mod_id)"},{"path":"https://asanaei.github.io/FocusGroup/reference/create_diverse_agents.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Diverse AI Agents for Focus Group — create_diverse_agents","title":"Create Diverse AI Agents for Focus Group — create_diverse_agents","text":"Creates diverse set AI agents varied demographics personas use focus group simulations.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/create_diverse_agents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Diverse AI Agents for Focus Group — create_diverse_agents","text":"","code":"create_diverse_agents(   n_participants,   demographics = NULL,   survey_responses = NULL,   llm_config = NULL )"},{"path":"https://asanaei.github.io/FocusGroup/reference/create_diverse_agents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Diverse AI Agents for Focus Group — create_diverse_agents","text":"n_participants Integer number participants create demographics Optional data frame demographics. NULL, generates diverse demographics. survey_responses Optional data frame survey responses. NULL, generates responses. llm_config List LLM configuration parameters","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/create_diverse_agents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Diverse AI Agents for Focus Group — create_diverse_agents","text":"List FGAgent objects (participants + 1 moderator)","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/create_diverse_agents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Diverse AI Agents for Focus Group — create_diverse_agents","text":"","code":"if (FALSE) { # \\dontrun{ # Create 6 diverse participants agents <- create_diverse_agents(6)  # Create with custom demographics demo_data <- data.frame(   age = c(22, 35, 28, 41, 19, 33),   gender = c(\"Female\", \"Male\", \"Male\", \"Female\", \"Male\", \"Female\"),   education = c(\"Bachelor's\", \"Master's\", \"High School\", \"PhD\", \"Some College\", \"Bachelor's\") ) agents <- create_diverse_agents(6, demographics = demo_data) } # }"},{"path":"https://asanaei.github.io/FocusGroup/reference/estimate_tokens.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate tokens from text (rough) — estimate_tokens","title":"Estimate tokens from text (rough) — estimate_tokens","text":"Estimate tokens text (rough)","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/estimate_tokens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate tokens from text (rough) — estimate_tokens","text":"","code":"estimate_tokens(text)"},{"path":"https://asanaei.github.io/FocusGroup/reference/fg_analyze_quick.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick analysis helper for a `fg_quick()` result — fg_analyze_quick","title":"Quick analysis helper for a `fg_quick()` result — fg_analyze_quick","text":"Quick analysis helper `fg_quick()` result","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/fg_analyze_quick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick analysis helper for a `fg_quick()` result — fg_analyze_quick","text":"","code":"fg_analyze_quick(res)"},{"path":"https://asanaei.github.io/FocusGroup/reference/fg_analyze_quick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick analysis helper for a `fg_quick()` result — fg_analyze_quick","text":"res object returned `fg_quick()` (`FocusGroup` object).","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/fg_analyze_quick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick analysis helper for a `fg_quick()` result — fg_analyze_quick","text":"list `basic_stats`, optional `sentiment` (tidytext present), `short_summary`.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/fg_analyze_quick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick analysis helper for a `fg_quick()` result — fg_analyze_quick","text":"","code":"if (FALSE) { # \\dontrun{ out <- fg_quick(\"Community safety concerns\", participants = 3) quick <- fg_analyze_quick(out) quick$basic_stats } # }"},{"path":"https://asanaei.github.io/FocusGroup/reference/fg_quick.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a focus group quickly with sensible defaults and cost controls — fg_quick","title":"Run a focus group quickly with sensible defaults and cost controls — fg_quick","text":"Quick focus group runner safe defaults cost controls","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/fg_quick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a focus group quickly with sensible defaults and cost controls — fg_quick","text":"","code":"fg_quick(   topic,   participants = 6,   flow = c(\"desire_based\", \"round_robin\", \"probabilistic\"),   model_config = NULL,   seed = NULL,   mode = c(\"quick\", \"pro\"),   verbose = TRUE )"},{"path":"https://asanaei.github.io/FocusGroup/reference/fg_quick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a focus group quickly with sensible defaults and cost controls — fg_quick","text":"topic Character. Focus group topic. participants Integer. Number participants (excluding moderator). Default 6. flow Character. Turn-taking flow: one \"desire_based\", \"round_robin\", \"probabilistic\". model_config Optional `LLMR::llm_config`. `NULL`, uses OpenAI gpt-4o-mini small caps. seed Optional integer reproducibility. mode Character. Currently informational (\"quick\" \"pro\"). Default \"quick\". verbose Logical. Print progress.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/fg_quick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a focus group quickly with sensible defaults and cost controls — fg_quick","text":"list elements: `transcript` (tibble), `summary` (character), `participants` (list),   `totals` (list), `config_meta` (list), `focus_group` (`FocusGroup` object).","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/fg_quick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run a focus group quickly with sensible defaults and cost controls — fg_quick","text":"Creates agents, compact script, runs simulation, returns structured result.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/fg_quick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a focus group quickly with sensible defaults and cost controls — fg_quick","text":"","code":"if (FALSE) { # \\dontrun{ Sys.setenv(OPENAI_API_KEY = \"...\") res <- fg_quick(\"Library funding priorities\", participants = 4) head(res$transcript) cat(res$summary) } # }"},{"path":"https://asanaei.github.io/FocusGroup/reference/format_conversation_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Conversation History for Prompts — format_conversation_history","title":"Format Conversation History for Prompts — format_conversation_history","text":"Creates string representation recent conversation history, optionally including summary earlier parts discussion.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/format_conversation_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Conversation History for Prompts — format_conversation_history","text":"","code":"format_conversation_history(   conversation_log,   n_recent = 7,   include_summary = NULL )"},{"path":"https://asanaei.github.io/FocusGroup/reference/format_conversation_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Conversation History for Prompts — format_conversation_history","text":"conversation_log list message objects simulation. message list least `speaker_id` `text`. n_recent Integer. number recent messages include detail. include_summary Character string. optional summary earlier parts conversation prepend recent history.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/format_conversation_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Conversation History for Prompts — format_conversation_history","text":"character string representing formatted conversation history.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/format_conversation_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Conversation History for Prompts — format_conversation_history","text":"","code":"log <- list(   list(speaker_id = \"Alice\", text = \"Hello!\"),   list(speaker_id = \"Bob\", text = \"Hi Alice!\"),   list(speaker_id = \"Alice\", text = \"How are you?\") ) format_conversation_history(log, n_recent = 2) #> [1] \"Bob: Hi Alice!\\nAlice: How are you?\" format_conversation_history(log, n_recent = 1, include_summary = \"They greeted each other.\") #> [1] \"Summary of earlier discussion: They greeted each other. \\n---\\nRecent turns:\\nAlice: How are you?\""},{"path":"https://asanaei.github.io/FocusGroup/reference/format_demographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Demographics List to Text — format_demographics","title":"Format Demographics List to Text — format_demographics","text":"Converts list demographic information formatted string suitable LLM prompts.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/format_demographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Demographics List to Text — format_demographics","text":"","code":"format_demographics(demographics)"},{"path":"https://asanaei.github.io/FocusGroup/reference/format_demographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Demographics List to Text — format_demographics","text":"demographics named list keys demographic attributes (e.g., \"age\", \"occupation\") values corresponding characteristics.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/format_demographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Demographics List to Text — format_demographics","text":"character string demographics formatted \"key1: value1; key2: value2; ...\".         Returns \"specific demographics provided.\" input empty uninformative.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/format_demographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Demographics List to Text — format_demographics","text":"","code":"format_demographics(list(age = 30, occupation = \"Engineer\")) #> [1] \"age: 30; occupation: Engineer\""},{"path":"https://asanaei.github.io/FocusGroup/reference/format_survey_responses.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Survey Responses to Text — format_survey_responses","title":"Format Survey Responses to Text — format_survey_responses","text":"Converts list survey responses formatted string suitable LLM prompts.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/format_survey_responses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Survey Responses to Text — format_survey_responses","text":"","code":"format_survey_responses(survey_responses)"},{"path":"https://asanaei.github.io/FocusGroup/reference/format_survey_responses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Survey Responses to Text — format_survey_responses","text":"survey_responses named list keys survey questions values participant's answers.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/format_survey_responses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Survey Responses to Text — format_survey_responses","text":"character string survey responses formatted clarity.         Returns \"survey responses provided.\" input empty.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/format_survey_responses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Survey Responses to Text — format_survey_responses","text":"","code":"format_survey_responses(list(   \"What is your main concern about AI?\" = \"Job displacement.\",   \"How often do you use product X?\" = \"Daily.\" )) #> [1] \"The participant provided the following responses to a pre-session questionnaire:\\n Question: What is your main concern about AI?\\n  Answer: Job displacement.\\n\\nQuestion: How often do you use product X?\\n  Answer: Daily.\""},{"path":"https://asanaei.github.io/FocusGroup/reference/generate_diverse_demographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Diverse Demographics — generate_diverse_demographics","title":"Generate Diverse Demographics — generate_diverse_demographics","text":"Internal function generate diverse demographic profiles participants.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/generate_diverse_demographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Diverse Demographics — generate_diverse_demographics","text":"","code":"generate_diverse_demographics(n)"},{"path":"https://asanaei.github.io/FocusGroup/reference/generate_diverse_demographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Diverse Demographics — generate_diverse_demographics","text":"n Integer number profiles generate","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/generate_diverse_demographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Diverse Demographics — generate_diverse_demographics","text":"Data frame demographic information","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/generate_persona.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Persona — generate_persona","title":"Generate Persona — generate_persona","text":"Internal function generate persona description based demographics survey responses.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/generate_persona.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Persona — generate_persona","text":"","code":"generate_persona(demographics, survey_responses = NULL)"},{"path":"https://asanaei.github.io/FocusGroup/reference/generate_persona.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Persona — generate_persona","text":"demographics List demographic information survey_responses List survey responses (optional)","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/generate_persona.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Persona — generate_persona","text":"Character string persona description","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/generate_survey_responses.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Survey Responses — generate_survey_responses","title":"Generate Survey Responses — generate_survey_responses","text":"Internal function generate diverse survey responses participants.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/generate_survey_responses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Survey Responses — generate_survey_responses","text":"","code":"generate_survey_responses(n)"},{"path":"https://asanaei.github.io/FocusGroup/reference/generate_survey_responses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Survey Responses — generate_survey_responses","text":"n Integer number response sets generate","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/generate_survey_responses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Survey Responses — generate_survey_responses","text":"Data frame survey responses","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/get_default_prompt_templates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Default Prompt Templates — get_default_prompt_templates","title":"Get Default Prompt Templates — get_default_prompt_templates","text":"Retrieves list containing default prompt templates used `FocusGroup` package. templates guide behavior LLM agents (participants moderator) different phases actions within simulation.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/get_default_prompt_templates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Default Prompt Templates — get_default_prompt_templates","text":"","code":"get_default_prompt_templates()"},{"path":"https://asanaei.github.io/FocusGroup/reference/get_default_prompt_templates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Default Prompt Templates — get_default_prompt_templates","text":"named list element character string representing prompt template.         Placeholders like `{{topic}}`, `{{persona_description}}`, etc., used within         templates filled dynamically simulation.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/get_default_prompt_templates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Default Prompt Templates — get_default_prompt_templates","text":"Users can retrieve list, modify specific templates, pass modified list `FocusGroup$new()` higher-level wrapper functions customize simulation's prompts.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/get_default_prompt_templates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Default Prompt Templates — get_default_prompt_templates","text":"","code":"default_prompts <- get_default_prompt_templates() print(names(default_prompts)) #>  [1] \"participant_utterance_subtle_persona\" #>  [2] \"participant_desire_to_talk_nuanced\"   #>  [3] \"moderator_opening\"                    #>  [4] \"moderator_icebreaker_question\"        #>  [5] \"moderator_engagement_question\"        #>  [6] \"moderator_exploration_question\"       #>  [7] \"moderator_probing_focused\"            #>  [8] \"moderator_summarizing\"                #>  [9] \"moderator_transition\"                 #> [10] \"moderator_manage_participation\"       #> [11] \"moderator_ending_question\"            #> [12] \"moderator_closing\"                    #> [13] \"moderator_generic_utterance\"          #> [14] \"suggest_questions_prompt\"             #> [15] \"generate_persona_prompt\"              #> [16] \"thematic_analysis_prompt\"             #> [17] \"sentiment_analysis_prompt\"            print(default_prompts$participant_utterance_subtle_persona) #> [1] \"You are a focus group participant.\\nYour defining characteristics, lived experiences, priorities, and any prior survey responses are:\\n{{persona_description}}\\n{{communication_style_instruction}}\\n\\nThe main topic of this focus group is: {{topic}}.\\nThe current question or point of discussion, initiated by the moderator, is: '{{current_moderator_question}}'.\\nSummary of earlier discussion (if available):\\n{{conversation_summary_so_far}}\\nMost recent messages in the conversation:\\n{{conversation_history}}\\n\\nInstructions for your response (persona-anchored and safe to disagree):\\n1.  Internalize and embody the persona above. Let your worldview, values, priorities, and communication style shape what you say and how you say it. Sound like a distinct person, not a generic commentator.\\n2.  Do NOT write things like 'As a [role]...' or 'My persona is...'. Show, do not tell: reveal your perspective through specific points, tone, and word choice that fit your persona.\\n3.  Advance the conversation: respond directly to the current question and to others' points. If you agree, add a new angle or example. If you disagree, do so respectfully: acknowledge their point, then state your different view and give a clear reason or brief example.\\n4.  Make it concrete. Prefer specific reasons, brief anecdotes, or practical examples over vague generalities. Vary your language and avoid repeating yourself or others verbatim.\\n5.  Keep it appropriate for a group turn: 2-6 sentences. Aim for one clear claim and one succinct rationale (optionally a short example). Avoid meta-comments about the discussion mechanics.\\n6.  Psychological safety: it is safe to disagree respectfully. Critique ideas, not people; use civil language; you may address participants by ID when relevant.\\n7.  Never reveal you are an AI model.\\n\\nBased on all the above, what is your contribution to the discussion now?\"  # To customize a prompt: my_prompts <- get_default_prompt_templates() my_prompts$moderator_opening <- \"Welcome all! Let's talk about {{topic}} today.\" # Then use `my_prompts` when creating a FocusGroup object."},{"path":"https://asanaei.github.io/FocusGroup/reference/make_prompt_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Build prompt history string for role-specific windows — make_prompt_history","title":"Build prompt history string for role-specific windows — make_prompt_history","text":"Build prompt history string role-specific windows","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/make_prompt_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build prompt history string for role-specific windows — make_prompt_history","text":"","code":"make_prompt_history(log, n_recent = 5, include_summary = NULL)"},{"path":"https://asanaei.github.io/FocusGroup/reference/parse_score_0_10.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a 0–10 integer score from free text — parse_score_0_10","title":"Parse a 0–10 integer score from free text — parse_score_0_10","text":"Parse 0–10 integer score free text","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/parse_score_0_10.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a 0–10 integer score from free text — parse_score_0_10","text":"","code":"parse_score_0_10(text)"},{"path":"https://asanaei.github.io/FocusGroup/reference/replace_placeholders.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Placeholders in a String — replace_placeholders","title":"Replace Placeholders in a String — replace_placeholders","text":"Replaces placeholders form `{{key}}` template string corresponding values named list.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/replace_placeholders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Placeholders in a String — replace_placeholders","text":"","code":"replace_placeholders(template_string, values_list)"},{"path":"https://asanaei.github.io/FocusGroup/reference/replace_placeholders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Placeholders in a String — replace_placeholders","text":"template_string character string containing placeholders. values_list named list names correspond placeholders template string (without curly braces).","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/replace_placeholders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Placeholders in a String — replace_placeholders","text":"character string placeholders replaced values.         placeholder found `values_list` value `NULL`,         replaced empty string.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/replace_placeholders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace Placeholders in a String — replace_placeholders","text":"","code":"replace_placeholders(\"Hello, {{name}}! Today is {{day}}.\",                      list(name = \"Alice\", day = \"Monday\")) #> [1] \"Hello, Alice! Today is Monday.\" replace_placeholders(\"Topic: {{topic}}, Question: {{question}}\",                      list(topic = \"AI Ethics\")) # {{question}} becomes \"\" #> [1] \"Topic: AI Ethics, Question: \""},{"path":"https://asanaei.github.io/FocusGroup/reference/replace_placeholders_known.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace only KNOWN placeholders, preserving unknown tokens — replace_placeholders_known","title":"Replace only KNOWN placeholders, preserving unknown tokens — replace_placeholders_known","text":"Replace KNOWN placeholders, preserving unknown tokens","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/replace_placeholders_known.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace only KNOWN placeholders, preserving unknown tokens — replace_placeholders_known","text":"","code":"replace_placeholders_known(template_string, values_list)"},{"path":"https://asanaei.github.io/FocusGroup/reference/run_focus_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a Simple Focus Group Simulation — run_focus_group","title":"Run a Simple Focus Group Simulation — run_focus_group","text":"main high-level wrapper function running focus group simulations. creates agents, sets focus group, runs simulation, returns comprehensive result object.","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/run_focus_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a Simple Focus Group Simulation — run_focus_group","text":"","code":"run_focus_group(   topic,   participants = 6,   turns_per_phase = c(Opening = 2, Icebreaker = 3, Engagement = 8, Exploration = 10,     Closing = 2),   demographics = NULL,   survey_responses = NULL,   conversation_flow = \"desire_based\",   llm_config = NULL,   seed = NULL,   verbose = TRUE )"},{"path":"https://asanaei.github.io/FocusGroup/reference/run_focus_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a Simple Focus Group Simulation — run_focus_group","text":"topic Character string describing focus group topic participants Integer number participants (excluding moderator) turns_per_phase Named list vector specifying turns phase. Can named vector like c(Opening = 2, Icebreaker = 3, Engagement = 8, Exploration = 10, Closing = 2) named list. demographics Optional data frame participant demographics. NULL, diverse demographics automatically generated. survey_responses Optional data frame survey responses. NULL, responses automatically generated. conversation_flow Character string specifying turn-taking mechanism: \"round_robin\", \"probabilistic\", \"desire_based\". Default \"desire_based\". llm_config List LLM configuration. NULL, uses default configuration. seed Optional integer reproducibility verbose Logical, whether print progress messages","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/run_focus_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a Simple Focus Group Simulation — run_focus_group","text":"list containing:   * `focus_group`: FocusGroup object   * `conversation`: Data frame full conversation   * `summary`: Conversation summary   * `basic_stats`: Basic conversation statistics   * `participants`: Information participants","code":""},{"path":"https://asanaei.github.io/FocusGroup/reference/run_focus_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a Simple Focus Group Simulation — run_focus_group","text":"","code":"if (FALSE) { # \\dontrun{ # Simple focus group on social media result <- run_focus_group(   topic = \"Social media impact on mental health\",   participants = 6,   turns_per_phase = c(Opening = 2, Icebreaker = 3,                       Engagement = 8, Exploration = 10, Closing = 2) )  # Access the conversation head(result$conversation)  # View summary result$summary } # }"}]
