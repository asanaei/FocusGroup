% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ConversationFlow.R
\name{RoundRobinFlow}
\alias{RoundRobinFlow}
\title{RoundRobinFlow Class}
\description{
Implements a round-robin turn-taking mechanism among participants.
The moderator is typically handled by the `FocusGroup`'s phase logic,
so this flow focuses on cycling through non-moderator agents.
}
\section{Super class}{
\code{\link[FocusGroup:ConversationFlow]{FocusGroup::ConversationFlow}} -> \code{RoundRobinFlow}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{current_participant_index}}{Integer. Current position in the rotation of participants.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RoundRobinFlow-new}{\code{RoundRobinFlow$new()}}
\item \href{#method-RoundRobinFlow-select_next_speaker}{\code{RoundRobinFlow$select_next_speaker()}}
\item \href{#method-RoundRobinFlow-clone}{\code{RoundRobinFlow$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="FocusGroup" data-topic="ConversationFlow" data-id="update_state_post_selection"><a href='../../FocusGroup/html/ConversationFlow.html#method-ConversationFlow-update_state_post_selection'><code>FocusGroup::ConversationFlow$update_state_post_selection()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RoundRobinFlow-new"></a>}}
\if{latex}{\out{\hypertarget{method-RoundRobinFlow-new}{}}}
\subsection{Method \code{new()}}{
Initialize RoundRobinFlow.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RoundRobinFlow$new(agents, moderator_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{agents}}{A named list of `FGAgent` objects.}

\item{\code{moderator_id}}{Character. The ID of the moderator agent.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RoundRobinFlow-select_next_speaker"></a>}}
\if{latex}{\out{\hypertarget{method-RoundRobinFlow-select_next_speaker}{}}}
\subsection{Method \code{select_next_speaker()}}{
Selects the next participant in round-robin order.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RoundRobinFlow$select_next_speaker(focus_group)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{focus_group}}{The `FocusGroup` object.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The selected `FGAgent` (a participant), or `NULL` if no participants.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RoundRobinFlow-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RoundRobinFlow-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RoundRobinFlow$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
